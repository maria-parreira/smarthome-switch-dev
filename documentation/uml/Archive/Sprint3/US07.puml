@startuml
'https://plantuml.com/sequence-diagram

!theme mars
skinparam sequenceMessageAlign direction

title US07 : I want to add a sensor to an existing device in a room. The sensor must be of a model of an existing type of sensor.
[o-> ":US07addSensorToDeviceController" ++ : 1 : addSensorToDevice(entryDTO)

":US07addSensorToDeviceController"-> ":House" ++ : 1.2 : getRoomByName(entryDTO._roomName)
    ":House" --> ":US07addSensorToDeviceController" -- : "myRoom: Room"

":US07addSensorToDeviceController" -> "myRoom: Room" ++ : 1.3 : getDeviceByName(entryDTO._deviceName)
"myRoom: Room" --> ":US07addSensorToDeviceController" -- : "myDevice: Device"

":US07addSensorToDeviceController" ->"myDevice :Device" ++ : myDevice.getDeviceIsActive()
":US07addSensorToDeviceController" <-- "myDevice :Device" --: true
note right
only continues if true
else returns null
end note

":US07addSensorToDeviceController" -> "myDevice :Device" ++ : 1.4 : addSensorToDevice(entryDTO._strSensorModel,this._catalogue)

"myDevice :Device" -> "myCatalogue :SensorCatalogue"++ : .      getSensor(entryDTO._strSensorModel)

"myCatalogue :SensorCatalogue" -> "mySensor :Sensor"** : Sensor(myCatalogue)
note left
In fact the Class.forName(strModelPath).
getConstructor(ActuatorCatalogue.class).
newInstance(this) is called.
end note

activate "mySensor :Sensor"
"mySensor :Sensor" --> "myCatalogue :SensorCatalogue" --: mySensor
"myDevice :Device" <-- "myCatalogue :SensorCatalogue" --: mySensor
":US07addSensorToDeviceController" <-- "myDevice :Device" --: "mySensor :Sensor"

":US07addSensorToDeviceController" -> ": SensorMapper" ++ : 1.5 : convertToDTO(mySensor)
    ": SensorMapper" --> ":US07addSensorToDeviceController"-- : mySensorDTO: SensorDTO

[o<-- ":US07addSensorToDeviceController" --: mySensorDTO: SensorDTO;
@enduml